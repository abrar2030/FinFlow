name: Security Scanning

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 0 * * 0'  # Run weekly on Sundays at midnight UTC
  workflow_dispatch:

jobs:
  dependency-scanning:
    name: Dependency Vulnerability Scanning
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [auth-service, payments-service, accounting-service, analytics-service, credit-engine, frontend]
        include:
          - service: auth-service
            path: backend/auth-service
          - service: payments-service
            path: backend/payments-service
          - service: accounting-service
            path: backend/accounting-service
          - service: analytics-service
            path: backend/analytics-service
          - service: credit-engine
            path: backend/credit-engine
          - service: frontend
            path: frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
      
      - name: Run npm audit
        run: |
          cd ${{ matrix.path }}
          npm audit --production --audit-level=high
      
      - name: Scan dependencies with Snyk
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --all-projects

  code-scanning:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, typescript
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
      
      - name: Run ESLint Security Rules
        run: |
          npm install -g eslint @typescript-eslint/parser eslint-plugin-security
          
          # Create a temporary ESLint config with security rules
          echo '{
            "parser": "@typescript-eslint/parser",
            "plugins": ["security"],
            "extends": ["plugin:security/recommended"],
            "parserOptions": {
              "ecmaVersion": 2020,
              "sourceType": "module"
            }
          }' > .eslintrc-security.json
          
          # Run ESLint with security rules on all JavaScript/TypeScript files
          find . -type f -name "*.js" -o -name "*.ts" -o -name "*.jsx" -o -name "*.tsx" | grep -v "node_modules" | xargs eslint -c .eslintrc-security.json

  secret-scanning:
    name: Secret and Credential Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog-actions-scan@master
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  container-scanning:
    name: Container Image Scanning
    runs-on: ubuntu-latest
    needs: [dependency-scanning, code-scanning]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        service: [auth-service, payments-service, accounting-service, analytics-service, credit-engine, frontend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.${{ matrix.service }}
          push: false
          tags: finflow-${{ matrix.service }}:test
          outputs: type=docker,dest=/tmp/finflow-${{ matrix.service }}.tar
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          input: /tmp/finflow-${{ matrix.service }}.tar
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  compliance-checks:
    name: Compliance and Best Practices
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Check for security headers in API responses
        run: |
          # Custom script to check for security headers in API configurations
          echo "Checking for security headers in API configurations..."
          grep -r "X-Content-Type-Options" --include="*.ts" --include="*.js" .
          grep -r "X-Frame-Options" --include="*.ts" --include="*.js" .
          grep -r "Content-Security-Policy" --include="*.ts" --include="*.js" .
          echo "Security header check completed."
      
      - name: Check for proper CORS configuration
        run: |
          # Custom script to check for proper CORS configuration
          echo "Checking for proper CORS configuration..."
          grep -r "cors" --include="*.ts" --include="*.js" .
          echo "CORS configuration check completed."
      
      - name: Check for proper authentication middleware
        run: |
          # Custom script to check for proper authentication middleware
          echo "Checking for proper authentication middleware..."
          grep -r "authenticate" --include="*.ts" --include="*.js" .
          echo "Authentication middleware check completed."

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scanning, code-scanning, secret-scanning, container-scanning, compliance-checks]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Generate security report
        run: |
          echo "# FinFlow Security Scan Report" > security-report.md
          echo "Generated on $(date)" >> security-report.md
          echo "" >> security-report.md
          echo "## Summary" >> security-report.md
          
          # Add job status summaries
          echo "- Dependency Scanning: ${{ needs.dependency-scanning.result }}" >> security-report.md
          echo "- Code Scanning: ${{ needs.code-scanning.result }}" >> security-report.md
          echo "- Secret Scanning: ${{ needs.secret-scanning.result }}" >> security-report.md
          echo "- Container Scanning: ${{ needs.container-scanning.result }}" >> security-report.md
          echo "- Compliance Checks: ${{ needs.compliance-checks.result }}" >> security-report.md
      
      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: security-report.md
          retention-days: 90

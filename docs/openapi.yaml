openapi: 3.0.0
info:
  title: FinFlow Payments Service API
  description: Payment processing and tracking API for the FinFlow platform
  version: 1.0.0
servers:
  - url: /api/v1
    description: Base API path
paths:
  /payments:
    get:
      summary: List payments
      description: Get a list of payments for the authenticated user
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 10
        - name: status
          in: query
          description: Filter by payment status
          required: false
          schema:
            type: string
            enum: [PENDING, PROCESSING, COMPLETED, FAILED, REFUNDED]
      responses:
        '200':
          description: Payments retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  payments:
                    type: array
                    items:
                      $ref: '#/components/schemas/Payment'
                  total:
                    type: integer
                  page:
                    type: integer
                  limit:
                    type: integer
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Internal server error
    post:
      summary: Create payment
      description: Initiate a new payment
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - amount
                - currency
                - source
              properties:
                amount:
                  type: number
                  format: float
                  minimum: 0.01
                currency:
                  type: string
                  enum: [USD, EUR, GBP, JPY]
                source:
                  type: string
                  description: Payment source token
                description:
                  type: string
      responses:
        '201':
          description: Payment initiated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        '400':
          description: Invalid input
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Internal server error
  /payments/{id}:
    get:
      summary: Get payment by ID
      description: Get details of a specific payment
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Payment ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Payment retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Forbidden - payment belongs to another user
        '404':
          description: Payment not found
        '500':
          description: Internal server error
  /payments/{id}/refund:
    post:
      summary: Refund payment
      description: Initiate a refund for a completed payment
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Payment ID
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                  format: float
                  description: Amount to refund (defaults to full amount if not specified)
                reason:
                  type: string
                  description: Reason for refund
      responses:
        '200':
          description: Refund initiated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        '400':
          description: Invalid input or payment cannot be refunded
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Forbidden - payment belongs to another user
        '404':
          description: Payment not found
        '500':
          description: Internal server error
  /payments/webhook:
    post:
      summary: Payment webhook
      description: Endpoint for payment processor webhooks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Webhook processed successfully
        '400':
          description: Invalid webhook payload
        '500':
          description: Internal server error
  /users/{userId}/data:
    get:
      summary: Export user payment data
      description: Export all payment data for a user (GDPR compliance)
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Payment data exported successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  payments:
                    type: array
                    items:
                      $ref: '#/components/schemas/Payment'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Forbidden - requires admin role or own user
        '404':
          description: User not found
        '500':
          description: Internal server error
    delete:
      summary: Delete user payment data
      description: Delete all payment data for a user (GDPR compliance)
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Payment data deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Forbidden - requires admin role or own user
        '404':
          description: User not found
        '500':
          description: Internal server error
  /health:
    get:
      summary: Health check
      description: Health check endpoint for monitoring
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: healthy
                  service:
                    type: string
                    example: payments-service
components:
  schemas:
    Payment:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        amount:
          type: number
          format: float
        currency:
          type: string
          enum: [USD, EUR, GBP, JPY]
        status:
          type: string
          enum: [PENDING, PROCESSING, COMPLETED, FAILED, REFUNDED]
        processorId:
          type: string
          description: ID from the payment processor
        description:
          type: string
        metadata:
          type: object
          description: Additional payment metadata
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
  responses:
    UnauthorizedError:
      description: Authentication information is missing or invalid
      headers:
        WWW-Authenticate:
          schema:
            type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

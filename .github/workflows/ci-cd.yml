name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [auth-service, payments-service, accounting-service, analytics-service, credit-engine]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'
          cache-dependency-path: backend/${{ matrix.service }}/package-lock.json
      
      - name: Install dependencies
        run: |
          cd backend/${{ matrix.service }}
          npm ci
      
      - name: Run ESLint
        run: |
          cd backend/${{ matrix.service }}
          npm run lint
      
      - name: Run TypeScript checks
        run: |
          cd backend/${{ matrix.service }}
          npm run typecheck

  frontend-lint:
    name: Frontend Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        run: |
          cd frontend
          npm ci
      
      - name: Run ESLint
        run: |
          cd frontend
          npm run lint
      
      - name: Run TypeScript checks
        run: |
          cd frontend
          npm run typecheck

  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        service: [auth-service, payments-service, accounting-service, analytics-service, credit-engine]
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: finflow_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      mongodb:
        image: mongo:5
        ports:
          - 27017:27017
      
      redis:
        image: redis:6
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'
          cache-dependency-path: backend/${{ matrix.service }}/package-lock.json
      
      - name: Install dependencies
        run: |
          cd backend/${{ matrix.service }}
          npm ci
      
      - name: Run unit tests
        run: |
          cd backend/${{ matrix.service }}
          npm test
      
      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          directory: backend/${{ matrix.service }}/coverage
          flags: backend-${{ matrix.service }}

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: frontend-lint
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        run: |
          cd frontend
          npm ci
      
      - name: Run unit tests
        run: |
          cd frontend
          npm test -- --coverage
      
      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          directory: frontend/coverage
          flags: frontend

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: finflow_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      mongodb:
        image: mongo:5
        ports:
          - 27017:27017
      
      redis:
        image: redis:6
        ports:
          - 6379:6379
      
      rabbitmq:
        image: rabbitmq:3-management
        ports:
          - 5672:5672
          - 15672:15672
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
      
      - name: Install dependencies
        run: |
          npm ci
      
      - name: Run integration tests
        run: |
          npm run test:integration

  build:
    name: Build Services
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        service: [auth-service, payments-service, accounting-service, analytics-service, credit-engine, frontend]
        include:
          - service: auth-service
            path: backend/auth-service
          - service: payments-service
            path: backend/payments-service
          - service: accounting-service
            path: backend/accounting-service
          - service: analytics-service
            path: backend/analytics-service
          - service: credit-engine
            path: backend/credit-engine
          - service: frontend
            path: frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'
          cache-dependency-path: ${{ matrix.path }}/package-lock.json
      
      - name: Install dependencies
        run: |
          cd ${{ matrix.path }}
          npm ci
      
      - name: Build
        run: |
          cd ${{ matrix.path }}
          npm run build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.service }}-build
          path: ${{ matrix.path }}/dist
          retention-days: 7

  docker:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    strategy:
      matrix:
        service: [auth-service, payments-service, accounting-service, analytics-service, credit-engine, frontend]
        include:
          - service: auth-service
            path: backend/auth-service
          - service: payments-service
            path: backend/payments-service
          - service: accounting-service
            path: backend/accounting-service
          - service: analytics-service
            path: backend/analytics-service
          - service: credit-engine
            path: backend/credit-engine
          - service: frontend
            path: frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.service }}-build
          path: ${{ matrix.path }}/dist
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: abrar2030/finflow-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=sha,format=short
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ${{ matrix.path }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=abrar2030/finflow-${{ matrix.service }}:buildcache
          cache-to: type=registry,ref=abrar2030/finflow-${{ matrix.service }}:buildcache,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: docker
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Kubernetes CLI
        uses: azure/setup-kubectl@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name finflow-staging-cluster --region us-east-1
      
      - name: Deploy to Kubernetes
        run: |
          # Update image tags in Kubernetes manifests
          COMMIT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          
          for service in auth-service payments-service accounting-service analytics-service credit-engine frontend; do
            sed -i "s|abrar2030/finflow-$service:.*|abrar2030/finflow-$service:sha-$COMMIT_SHA|g" kubernetes/staging/$service.yaml
            kubectl apply -f kubernetes/staging/$service.yaml
          done
          
          kubectl apply -f kubernetes/staging/ingress.yaml
      
      - name: Verify deployment
        run: |
          for service in auth-service payments-service accounting-service analytics-service credit-engine frontend; do
            kubectl rollout status deployment/$service -n finflow-staging
          done

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: docker
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://finflow.abrar2030.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Kubernetes CLI
        uses: azure/setup-kubectl@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name finflow-production-cluster --region us-east-1
      
      - name: Deploy to Kubernetes
        run: |
          # Update image tags in Kubernetes manifests
          COMMIT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          
          for service in auth-service payments-service accounting-service analytics-service credit-engine frontend; do
            sed -i "s|abrar2030/finflow-$service:.*|abrar2030/finflow-$service:sha-$COMMIT_SHA|g" kubernetes/production/$service.yaml
            kubectl apply -f kubernetes/production/$service.yaml
          done
          
          kubectl apply -f kubernetes/production/ingress.yaml
      
      - name: Verify deployment
        run: |
          for service in auth-service payments-service accounting-service analytics-service credit-engine frontend; do
            kubectl rollout status deployment/$service -n finflow-production
          done
